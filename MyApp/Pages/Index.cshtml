@page "/"
@attribute [RenderStatic]
@inject MarkdownBlog Blog
@{
    ViewData["Title"] = "Jamstack .NET";
}

<div id="app" class="container mx-auto px-5">
    <section class="w-full flex flex-col justify-center text-center">
        <div id="empty" class="mt-4 mb-2">
            <h3 class="mt-8 text-6xl md:text-8xl font-bold tracking-tighter leading-tight">C# Jamstack Projects</h3>
            <p class="my-6 text-xl text-gray-500"> Premier <a class="text-blue-600" title="Static Site Generation" href="https://www.freecodecamp.org/news/static-site-generation-with-nextjs/">SSG</a> &amp; <a class="text-blue-600" title="Single-page application" href="https://en.wikipedia.org/wiki/Single-page_application">SPA</a> Web App templates delivering the ultimate Dev &amp; end-user UX </p>
            <p class="my-6 text-xl text-gray-500">Download a new Jamstack UI .NET 6 <a class="text-blue-600" href="https://servicestack.net">ServiceStack</a> API project </p>
            <div class="flex justify-center mb-16">
                <div class="w-70">
                    <input v-model="name" type="text" placeholder="Project Name" autocorrect="off" spellcheck="false" v-on:keypress="isAlphaNumeric"
                           class="mt-1 text-lg block w-full px-3 py-2 bg-white dark:bg-black border border-slate-300 rounded-md text-sm shadow-sm placeholder-slate-400 focus:outline-none focus:border-sky-500 focus:ring-1 focus:ring-sky-500">
                </div>
            </div>
            <div id="ssg" class="mt-4 mb-2">
                <h3 class="text-gray-400 text-xl mb-2">SSG Templates</h3>
                <div class="flex flex-wrap justify-center">
                    <div>
                        <project-template :name="name" :mix="mixTags" repo="NetCoreTemplates/razor-ssg" :tags="['ssg','markdown']" :count="count('razor-ssg')">
                            <div class="mb-3 text-xl font-medium text-gray-700 dark:text-gray-200">Razor SSG</div>
                            <template #icon>
                                <svg class="w-12 h-12 text-indigo-600" xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" viewBox="0 0 32 32"><path fill="currentColor" d="M23.844 27.692a16.332 16.332 0 0 1-6.645 1.3q-6.364 0-10.013-3.243a11.3 11.3 0 0 1-3.649-8.9a13.716 13.716 0 0 1 3.785-9.898A12.716 12.716 0 0 1 16.9 3.008a11.676 11.676 0 0 1 8.425 3.006a9.994 9.994 0 0 1 3.142 7.533a10.187 10.187 0 0 1-2.318 7.114a7.532 7.532 0 0 1-5.817 2.547a2.613 2.613 0 0 1-1.845-.642a2.323 2.323 0 0 1-.764-1.6a4.9 4.9 0 0 1-4.148 2.243a4.6 4.6 0 0 1-3.507-1.479a5.706 5.706 0 0 1-1.384-4.063a9.913 9.913 0 0 1 2.2-6.357q2.2-2.763 4.8-2.763a5.063 5.063 0 0 1 4.256 1.716l.311-1.338h2.405l-2.081 9.08a10.716 10.716 0 0 0-.352 2.243q0 .972.744.972a4.819 4.819 0 0 0 3.877-2.047a8.93 8.93 0 0 0 1.621-5.681a7.98 7.98 0 0 0-2.675-6.175a9.887 9.887 0 0 0-6.919-2.432a10.6 10.6 0 0 0-8.158 3.467a12.066 12.066 0 0 0-3.2 8.495a9.561 9.561 0 0 0 3.06 7.573q3.06 2.7 8.586 2.7a13.757 13.757 0 0 0 5.675-1.054ZM19.466 12.25a3.977 3.977 0 0 0-3.6-1.716q-1.824 0-3.263 2.23a8.726 8.726 0 0 0-1.439 4.824q0 3.635 2.905 3.635a3.771 3.771 0 0 0 2.651-1.183a6.309 6.309 0 0 0 1.7-3.2Z"></path></svg>
                            </template>
                        </project-template>
                    </div>
                    <div>
                        <project-template :name="name" repo="NetCoreTemplates/nextjs" :tags="['autoquery','auth']" :count="count('nextjs')">
                            <div class="mb-3 text-xl font-medium text-gray-700 dark:text-gray-200">Next.js</div>
                            <template #icon>
                                <svg class="w-12 h-12 text-indigo-600" xmlns="http://www.w3.org/2000/svg" width="15" height="15" viewBox="0 0 15 15"><path fill="currentColor" fill-rule="evenodd" d="M0 7.5a7.5 7.5 0 1 1 11.697 6.216L4.907 4.21A.5.5 0 0 0 4 4.5V12h1V6.06l5.83 8.162A7.5 7.5 0 0 1 0 7.5ZM10 10V4h1v6h-1Z" clip-rule="evenodd"/></svg>
                            </template>
                        </project-template>
                    </div>
                    <div>
                        <project-template :name="name" repo="NetCoreTemplates/vue-ssg" :tags="['autoquery','auth']" :count="count('vue-ssg')">
                            <div class="mb-3 text-xl font-medium text-gray-700 dark:text-gray-200">Vue SSG</div>
                            <template #icon>
                                <svg class="w-12 h-12 text-indigo-600" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><path fill="currentColor" d="M2 3h3.5L12 15l6.5-12H22L12 21L2 3m4.5 0h3L12 7.58L14.5 3h3L12 13.08L6.5 3Z"/></svg>
                            </template>
                        </project-template>
                    </div>
                </div>
            </div>
        </div>
    </section>
    <section class="w-full flex flex-col justify-center text-center">
        <div id="spa" class="mt-4 mb-2">
            <h3 class="text-gray-400 text-xl mb-2">SPA Templates</h3>
            <div class="flex flex-wrap justify-center">
                <div>
                    <project-template :name="name" :mix="mixTags" repo="NetCoreTemplates/blazor-tailwind" :tags="['autoquery','auth']" :count="count('blazor-tailwind')">
                        <div class="mb-3 text-xl font-medium text-gray-700 dark:text-gray-200">Blazor WASM</div>
                        <template #icon>
                            <svg class="w-12 h-12 text-indigo-600" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><path fill="currentColor" d="M12 6c-2.67 0-4.33 1.33-5 4c1-1.33 2.17-1.83 3.5-1.5c.76.19 1.31.74 1.91 1.35c.98 1 2.09 2.15 4.59 2.15c2.67 0 4.33-1.33 5-4c-1 1.33-2.17 1.83-3.5 1.5c-.76-.19-1.3-.74-1.91-1.35C15.61 7.15 14.5 6 12 6m-5 6c-2.67 0-4.33 1.33-5 4c1-1.33 2.17-1.83 3.5-1.5c.76.19 1.3.74 1.91 1.35C8.39 16.85 9.5 18 12 18c2.67 0 4.33-1.33 5-4c-1 1.33-2.17 1.83-3.5 1.5c-.76-.19-1.3-.74-1.91-1.35C10.61 13.15 9.5 12 7 12Z"/></svg>
                        </template>
                    </project-template>
                </div>
                <div>
                    <project-template :name="name" repo="NetCoreTemplates/vue-vite" :tags="['autoquery','auth']" :count="count('vue-vite')">
                        <div class="mb-3 text-xl font-medium text-gray-700 dark:text-gray-200">Vue Vite</div>
                        <template #icon>
                            <svg class="w-12 h-12 text-indigo-600" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><path fill="currentColor" d="M2 3h3.5L12 15l6.5-12H22L12 21L2 3m4.5 0h3L12 7.58L14.5 3h3L12 13.08L6.5 3Z"/></svg>
                        </template>
                    </project-template>
                </div>
                <div>
                    <project-template :name="name" :mix="mixTags" repo="NetCoreTemplates/blazor-wasm" :tags="['autoquery','auth']" :count="count('blazor-tailwind')">
                        <div class="mb-3 text-xl font-medium text-gray-700 dark:text-gray-200">Blazor WASM</div>
                        <template #icon>
                            <svg class="w-12 h-12 text-indigo-600" xmlns="http://www.w3.org/2000/svg" width="256" height="204" viewBox="0 0 256 204"><path fill="#7E13F8" d="M53.172 0C38.565 0 27.756 12.785 28.24 26.65c.465 13.32-.139 30.573-4.482 44.642C19.402 85.402 12.034 94.34 0 95.488v12.956c12.034 1.148 19.402 10.086 23.758 24.197c4.343 14.069 4.947 31.32 4.482 44.641c-.484 13.863 10.325 26.65 24.934 26.65h149.673c14.608 0 25.414-12.785 24.93-26.65c-.464-13.32.139-30.572 4.482-44.641c4.359-14.11 11.707-23.05 23.741-24.197V95.488c-12.034-1.148-19.382-10.086-23.74-24.196c-4.344-14.067-4.947-31.321-4.483-44.642C228.261 12.787 217.455 0 202.847 0H53.17h.002ZM173.56 125.533c0 19.092-14.24 30.67-37.872 30.67h-40.23a4.339 4.339 0 0 1-4.338-4.339V52.068a4.339 4.339 0 0 1 4.339-4.34h39.999c19.705 0 32.637 10.675 32.637 27.063c0 11.503-8.7 21.801-19.783 23.604v.601c15.089 1.655 25.248 12.104 25.248 26.537Zm-42.26-64.05h-22.937v32.4h19.32c14.934 0 23.17-6.014 23.17-16.764c0-10.073-7.082-15.636-19.552-15.636Zm-22.937 45.256v35.705h23.782c15.548 0 23.786-6.239 23.786-17.965c0-11.728-8.467-17.742-24.786-17.742h-22.782v.002Z"/></svg>
                        </template>
                    </project-template>
                </div>
            </div>
        </div>
    </section>
    <section class="w-full flex flex-col justify-center text-center">
        <div id="ssr" class="mt-4 mb-2">
            <h3 class="text-gray-400 text-xl mb-2">SSR Templates</h3>
            <div class="flex flex-wrap justify-center">
                <div>
                    <project-template :name="name" :mix="mixTags" repo="NetCoreTemplates/blazor-server" :tags="['autoquery','auth']" :count="count('blazor-server')">
                        <div class="mb-3 text-xl font-medium text-gray-700 dark:text-gray-200">Blazor Server</div>
                        <template #icon>
                            <svg class="w-12 h-12 text-indigo-600" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><path fill="currentColor" d="M12 6c-2.67 0-4.33 1.33-5 4c1-1.33 2.17-1.83 3.5-1.5c.76.19 1.31.74 1.91 1.35c.98 1 2.09 2.15 4.59 2.15c2.67 0 4.33-1.33 5-4c-1 1.33-2.17 1.83-3.5 1.5c-.76-.19-1.3-.74-1.91-1.35C15.61 7.15 14.5 6 12 6m-5 6c-2.67 0-4.33 1.33-5 4c1-1.33 2.17-1.83 3.5-1.5c.76.19 1.3.74 1.91 1.35C8.39 16.85 9.5 18 12 18c2.67 0 4.33-1.33 5-4c-1 1.33-2.17 1.83-3.5 1.5c-.76-.19-1.3-.74-1.91-1.35C10.61 13.15 9.5 12 7 12Z"/></svg>
                        </template>
                    </project-template>
                </div>
            </div>
        </div>
    </section>
</div>

<div class="flex justify-center mt-32">
    <div class="text-center">
        <svg class="text-indigo-600 w-36 h-36 inline-block" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><path fill="currentColor" d="m18 16l-4-3.2V16H6V8h8v3.2L18 8m2-4H4a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2V6a2 2 0 0 0-2-2Z"/></svg>
        <h1 class="text-6xl md:text-7xl lg:text-8xl font-bold tracking-tighter leading-tight md:leading-none mb-12 text-center md:text-left">
            Videos
        </h1>
    </div>
</div>

@await Html.PartialAsync("VideoIncludes")

@await Html.PartialAsync("VideoGroup", new Shared.VideoGroup {
  Title = "Jamstack Project Templates",
  Summary = "Get Started quickly with your preferred Jamstack project template",
  Group = "projects",
  LearnMore = "https://docs.servicestack.net/templates-overview",
})

@await Html.PartialAsync("VideoGroup", new Shared.VideoGroup {
  Title = "Blazor WASM and Server Templates",
  Summary = "Learn about Blazor with ServiceStack's ideal development workflow without compromise",
  Group = "blazor",
  LearnMore = "https://servicestack.net/blazor",
  Background = "bg-slate-100 dark:bg-slate-800",
})

@await Html.PartialAsync("VideoGroup", new Shared.VideoGroup {
  Title = "Vue Components",
  Summary = "Learn about productive features in our growing Vue Component Library",
  Group = "vue",
  LearnMore = "https://docs.servicestack.net/vue/",
})

<div class="flex justify-center my-20">
    <div class="text-center">
        <svg class="text-indigo-600 w-36 h-36 inline-block" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><path fill="currentColor" d="m18 16l-4-3.2V16H6V8h8v3.2L18 8m2-4H4a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2V6a2 2 0 0 0-2-2Z"/></svg>
        <h1 class="text-6xl md:text-7xl lg:text-8xl font-bold tracking-tighter leading-tight md:leading-none mb-12 text-center md:text-left">
            Blog
        </h1>
    </div>
</div>

<div class="container mx-auto px-5 mt-24 mb-24">
@{
    var posts = Blog.GetPosts();
    var primaryPost = posts.FirstOrDefault();
    if (primaryPost != null)
    {
        var authorHref = Blog.GetAuthorLink(primaryPost.Author);
        <section>
            <div class="mb-8 md:mb-16">
                <div class="sm:mx-0">
                    <a aria-label="@primaryPost.Title" href="@Blog.GetPostLink(primaryPost)">
                        <img src="@primaryPost.Image" alt="Cover Image for @primaryPost.Title" class="shadow-sm hover:shadow-2xl transition-shadow duration-200">
                    </a>
                </div>
            </div>
            <div class="md:grid md:grid-cols-2 md:gap-x-16 lg:gap-x-8 mb-20 md:mb-28">
                <div>
                    <h3 class="mb-4 text-4xl lg:text-6xl leading-tight">
                        <a class="hover:underline" href="@Blog.GetPostLink(primaryPost)">@primaryPost.Title</a>
                    </h3>
                    <div class="mb-4 md:mb-0 text-lg">
                        <time datetime="@Blog.GetDateTimestamp(primaryPost.Date)">@Blog.GetDateLabel(primaryPost.Date)</time>
                    </div>
                </div>
                <div>
                    <p class="text-lg leading-relaxed mb-4">@primaryPost.Summary</p>
                    @if (authorHref != null)
                    {
                        <a class="flex items-center text-xl font-bold" href="@authorHref">
                            <img src="@Blog.GetAuthorProfileUrl(primaryPost.Author)" class="w-12 h-12 rounded-full mr-4" alt="Author">
                            <span>@primaryPost.Author</span>
                        </a>
                    }
                    else
                    {
                        <span class="flex items-center text-xl font-bold">
                            <img src="@Blog.GetAuthorProfileUrl(primaryPost.Author)" class="w-12 h-12 rounded-full mr-4" alt="Author">
                            <span>@primaryPost.Author</span>
                        </span>
                    }
                </div>
            </div>
        </section>
    }

    var gridPosts = posts.Skip(1).Take(6).ToList();
    if (gridPosts.Count > 0)
    {
        <section>
            <h2 class="mb-8 text-6xl md:text-7xl font-bold tracking-tighter leading-tight">More from the blog</h2>
            <div class="mx-auto mt-12 grid max-w-lg gap-5 lg:max-w-none lg:grid-cols-3">
                @foreach (var post in gridPosts)
                {
                    var authorHref = Blog.GetAuthorLink(post.Author);
                    <div class="flex flex-col overflow-hidden rounded-lg shadow-lg">
                        <div class="flex-shrink-0">
                            <a href="@Blog.GetPostLink(post)">
                                <img class="h-48 w-full object-cover" src="@Blog.GetSplashImage(post)" alt="">
                            </a>
                        </div>
                        <div class="flex flex-1 flex-col justify-between bg-white dark:bg-black p-6">
                            <div class="flex-1">
                                <p class="text-sm font-medium text-indigo-600 dark:text-indigo-300">
                                    Article
                                </p>
                                <a href="@Blog.GetPostLink(post)" class="mt-2 block">
                                    <p class="text-xl font-semibold text-gray-900 dark:text-gray-50">@post.Title</p>
                                    <p class="mt-3 text-base text-gray-500">@post.Summary</p>
                                </a>
                            </div>
                            <div class="mt-6 flex items-center">
                                <div class="flex-shrink-0">
                                    <span>
                                        <span class="sr-only">@post.Author</span>
                                        <img class="h-10 w-10 rounded-full" src="@Blog.GetAuthorProfileUrl(post.Author)" alt="@post.Title background">
                                    </span>
                                </div>
                                <div class="ml-3">
                                    <p class="text-sm font-medium text-gray-900">
                                        @if (authorHref != null)
                                        {
                                            <a href="@Blog.GetAuthorLink(post.Author!)" class="hover:underline">@post.Author</a>
                                        }
                                        else
                                        {
                                            <span>@post.Author</span>
                                        }
                                    </p>
                                    <div class="flex space-x-1 text-sm text-gray-500">
                                        <time datetime="@Blog.GetDateTimestamp(post.Date)">@Blog.GetDateLabel(post.Date)</time>
                                        <span aria-hidden="true">&middot;</span>
                                        <span>@Blog.MinutesToRead(post.WordCount) min read</span>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                }                
            </div>            
        </section>        
    }
    
    var remainingPosts = posts.Skip(7).Take(15).ToList();
    if (remainingPosts.Count > 0)
    {
        <section class="mt-24 flex justify-center">
            <div class="flex max-w-screen-lg">
                <div class="w-2/3">
                    @foreach (var post in remainingPosts)
                    {
                        var authorHref = Blog.GetAuthorLink(post.Author);
                        <div class="border-b pb-4 mb-4">
                            <div class="flex justify-between">
                                <div class="w-3/4">
                                    <a href="@Blog.GetPostLink(post)" class="mt-2 block">
                                        <p class="text-xl font-semibold text-gray-900 dark:text-gray-50">@post.Title</p>
                                        <p class="mt-3 text-base text-gray-500">@post.Summary</p>
                                    </a>
                                    <div class="mt-6 flex items-center">
                                        <div class="flex-shrink-0">
                                            <span>
                                                <span class="sr-only">@post.Author</span>
                                                <img class="h-10 w-10 rounded-full" src="@Blog.GetAuthorProfileUrl(post.Author)" alt="@post.Title background">
                                            </span>
                                        </div>
                                        <div class="ml-3">
                                            <p class="text-sm font-medium text-gray-900">
                                                @if (authorHref != null)
                                                {
                                                    <a href="@Blog.GetAuthorLink(post.Author!)" class="hover:underline">@post.Author</a>
                                                }
                                                else
                                                {
                                                    <span>@post.Author</span>
                                                }
                                            </p>
                                            <div class="flex space-x-1 text-sm text-gray-500">
                                                <time datetime="@Blog.GetDateTimestamp(post.Date)">@Blog.GetDateLabel(post.Date)</time>
                                                <span aria-hidden="true">&middot;</span>
                                                <span>@Blog.MinutesToRead(post.WordCount) min read</span>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <div class="w-1/4">
                                    <a href="@Blog.GetPostLink(post)" class="pt-4">
                                        <img class="w-full object-cover max-h-[130px]" src="@Blog.GetSplashImage(post)" alt="">
                                    </a>
                                </div>
                            </div>
                        </div>
                    }
                </div>
                <div class="w-1/3">
                    <div class="pl-8">
                        <div class="flex items-center">
                            <svg class="w-8 h-8 mx-1" xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewBox="0 0 32 32"><path fill="currentColor" d="M10 6c1.544 1.76 2.276 4.15 2.217 6.61c3.968 1.67 9.924 6.12 11.181 12.39H28C26.051 14.31 14.918 6.77 10 6zm-2 7c4.67 4.913.81 11.582-4 12h18.97C21.5 18.289 11.95 13.533 8 13z"/></svg>
                            <span class="hidden sm:block text-lg font-semibold">ServiceStack</span>
                        </div>
                        <div class="p-2">
                            <p class="text-gray-500">ServiceStack started development in 2008 with the mission of creating a 
                                best-practices services framework with an emphasis on simplicity and speed</p>
                            <a href="https://docs.servicestack.net/why-servicestack" class="text-sm font-medium text-gray-900 hover:underline">more information</a>
                        </div>
                        <div class="p-4">
                            @await Html.PartialAsync("FollowLinks")
                        </div>
                    </div>
                </div>
            </div>
        </section>
    }
}
</div>


<script type="module">
import { ref, computed, onMounted, watch } from "vue"
import { mount } from "app.mjs"
import { queryString, setQueryString } from "@@servicestack/client"

const App = {
    setup() {
        const name = ref('')
        const mixModel = ref({})

        function isAlphaNumeric(e) {
            const c = e.charCode;
            if (c >= 65 && c <= 90 || c >= 97 && c <= 122 || c >= 48 && c <= 57 || c === 95) //A-Za-z0-9_
                return;
            e.preventDefault()
        }
        
        const mixTags = computed(() => {
            const ret = []
            Object.keys(mixModel.value).forEach(k => {
                const v = mixModel.value[k]
                if (typeof v == 'boolean') {
                    if (v) ret.push(k)
                } else if (v != null) {
                    ret.push(v)
                }
            })
            return ret
        })
        
        function reset() {
            mixModel.value = {}
            name.value = ''
        }
        function count(repo) {
            return 0
        }
        
        const mixTool = computed(() => 
            `x new web ${name.value||'MyApp'} && cd ${name.value||'MyApp'}${mixTags.value.length > 0 ? ' && x mix -f ' + mixTags.value.join(' ') : ''}`)
        
        watch([name, mixModel], () => {
            const args = { Name: name.value || undefined, Mix: mixTags.value.length ? mixTags.value.join(',') : undefined }
            const url = setQueryString(location.href, args)
            history.pushState({}, '', url)
        }, { deep:true })
        
        onMounted(() => {
            const qs = queryString(location.search)
            const boolProps = Array.from(document.querySelectorAll('[type=radio]')).map(x => [x.name,x.value])
            const mix = (qs.mix || qs.Mix || '').split(',').filter(x => !!x)
            mix.forEach(tag => {
                const boolProp = boolProps.find(x => x[1] === tag)
                if (boolProp) {
                    mixModel.value[boolProp[0]] = boolProp[1]
                } else {
                    mixModel.value[tag] = true
                }
            })
        })
        
        return { name, mixModel, mixTags, isAlphaNumeric, mixTool, reset, count }
    }
}
mount('#app', App)
</script>